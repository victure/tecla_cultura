== Santa Tecla Cultural CMS

Esta Aplicacion hecha en Ruby On Rails sirve como plataforma administrativa de la aplicacion para smarphones que lleva el mismo titlo a continuacion se detallan algunos puntos que tomar en cuenta antes de ponerla en funcionamiento


== Estructura
La estructura de folders de la aplicacion esla siguiente:

  |-- app
  |   |-- assets
  |       |-- images
  |       |-- javascripts
  |       `-- stylesheets
  |   |-- controllers
  |       |-- admin
  |       `-- mobile_app
  |   |-- helpers
  |   |-- mailers
  |   |-- models
  |   `-- views
  |       |-- layouts
  |       |-- admin
  |       |-- mobile_app
  |       `-- sessions
  |-- config
  |   |-- environments
  |   |-- initializers
  |   `-- locales
  |-- db
  |-- doc
  |-- lib
  |   `-- tasks
  |-- log
  |-- public
  |-- script
  |-- test
  |   |-- fixtures
  |   |-- functional
  |   |-- integration
  |   |-- performance
  |   `-- unit
  |-- tmp
  |   |-- cache
  |   |-- pids
  |   |-- sessions
  |   `-- sockets
  `-- vendor
      |-- assets
          `-- stylesheets
      `-- plugins

app
  Contiene todo el codigo específico de la apliacion.

app/assets
  Contiene subdirectorios para imagenes, hojas de estulo y archivos Javascript.

app/controllers
  Contienen los controladores que se encargar de manejar las rutas mapeadas por la apliacion, a la ves
  este tambien contiene dos subdirectorios que hacen referencia a dos espacios de nombre distintos 
  "admin" que se refiere a todo lo referente conla parte administrativa dela misma y "mobile_app" 
  que es el punto final con el se comunica la apliacion corriendo en los smartphones

app/models
  Contiene los modelos de datos de la aplicacion.

app/views
  Contiene las plantillas html utilizadas para renderizar el contenido devuelto por los controladores, 
  estas estan divididas en los mismo espacios de nombres que los controladores.

app/views/layouts
  Contiene los layouts sobre las cuales las vistas son renderizadas.

app/helpers
  Contiene algunas funciones de ayuda para renderizar codigo en las vistas.

config
  COntiene archivos de configuracion para el entorno de Ruby On Rails, el mapeo de rutas y conexiones a
   bases de datos.

db
  Contiene la definicion del esquema de base de datos y las respectivas migraciones.



public
  El directorio disponible para el servidor web. También contiene los despachadores y los
  archivos HTML predeterminados. Se debe establecer como DOCUMENT_ROOT del servidor.



== Configuraciones

Para que la aplicacion del CMS funcione bien se debe tomar en cuenta el lugar fisico donde se estara
almacenando los archivos subidos al servidor tales como imagenes, hojas de calculo etc. la configuracion
defualt es local,osea, en el mismo equipo fisico en donde se esta hosteando la aplicacion, pero se puede
configurar para que trabaje con servicios remotos como aws-s3

Para configurar aws-s3 siga los siguientes pasos

1- Dirigirse al directorio app/uploaders y remplazar en todos los archivos  "storage :file" con "storage :fog" 
2- Dirigirse al archivo config/initializers/carrierwave.rb y agregar el siguiente codigo

if Rails.env.development? or Rails.env.production? # Using Amazon S3 for Development and Production
  CarrierWave.configure do |config|
    config.root = Rails.root.join('tmp')
    config.cache_dir = 'uploads'

    config.storage = :fog
    config.fog_credentials = {
        :provider => 'AWS', # required
        :aws_access_key_id => 'XXXXXXXXXXXXXXXXXXXXXXXXXXXX', # required
        :aws_secret_access_key => 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', # required
    }
    config.fog_directory = 'xxxxxx' # required
  end
end

  y remplazar las "x" con las llaves y directorio respectivos

3- Para mayor informacion de como configurar la aplicacion con otros provedores visitar el sitio https://github.com/jnicklas/carrierwave/wiki
